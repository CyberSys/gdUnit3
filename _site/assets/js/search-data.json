{"0": {
    "doc": "About",
    "title": "About",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com . You can find the source code for Minima at GitHub: jekyll / minima . You can find the source code for Jekyll at GitHub: jekyll / jekyll . ",
    "url": "http://localhost:4000/gdUnit3/about/",
    "relUrl": "/about/"
  },"1": {
    "doc": "Home",
    "title": "Draft Version (Work in Progress)",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/#draft-version-work-in-progress",
    "relUrl": "/#draft-version-work-in-progress"
  },"2": {
    "doc": "Home",
    "title": "GdUnit3 V2.0.0 - Beta",
    "content": ". What is GdUnit3? . Gd(Godot)Unit(Unit Testing)3(Godot 3.x) . GdUnit3 is an embeded unit testing framework for testing your Gd, C# Scripts and Scenes within the Godot editor. GdUnit3 is very useful for TDD (test driven development) and will help you get your code bug-free. You are welcome to: . | Give Feedback | Suggest Improvements | Report Bugs | . Main Features . | Write and run tests in GdScript or C# | Embedded test Inspector in the Godot to navigate over your test suites | Run test-suite(s) by using the context menu on FileSystem, ScriptEditor or GdUnit Inspector | Create test’s directly from the ScriptEditor | A Configurable template for the creation of a new test-suite | A spacious set of Asserts use to verify your code | Argument matchers to verify the behavior of a function call by a specified argument type. | Fluent syntax support | Test Fuzzing support | Mocking a class to simulate the implementation which you define the output of certain function | Spy on a instance to verify that a function has been called with certain parameters. | Mock or Spy on a Scene | Provides a scene runner to simulate interactions on a scene . | Simulate by Input events like mouse and/or keyboard | Simulate scene processing by a certain number of frames | Simulate scene proccessing by waiting for a specific signal | Simulate scene proccessing by waiting for a specific function result | . | Update Notifier to install latest version from GitHub | Command Line Tool | . ",
    "url": "http://localhost:4000/gdUnit3/#gdunit3-v200---beta",
    "relUrl": "/#gdunit3-v200---beta"
  },"3": {
    "doc": "Home",
    "title": "Test Example",
    "content": ". | GdScript | C# | . | class_name GdUnitExampleTest extends GdUnitTestSuite func test_example(): assert_str(\"This is a example message\").has_length(25).starts_with(\"This is a ex\") . | namespace examples { using GdUnit3; using static GdUnit3.Assertions; [TestSuite] public class GdUnitExampleTest { [TestCase] public void Example() { AssertString(\"This is a example message\").HasLength(25).StartsWith(\"This is a ex\"); } } } . | . ",
    "url": "http://localhost:4000/gdUnit3/#test-example",
    "relUrl": "/#test-example"
  },"4": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/",
    "relUrl": "/"
  },"5": {
    "doc": "Your First Test",
    "title": "Create your first Test",
    "content": "The fastest way to create a test is to use the built-in “Create Test” function. To do this, open your script that you want to test and right-click on a function and then click “Create Test”. We selected the function full_name to generate a test for it. Thats all, your first test is created! . A test is defined as a function following the pattern test_name([args]): and must start with the prefix “test_” to be identified as a test. The name is freely selectable, but should correspond to the function to be tested. Test arguments are optional and will be explainted later in the advanced testing section. ",
    "url": "http://localhost:4000/gdUnit3/first_steps/firstTest/#create-your-first-test",
    "relUrl": "/first_steps/firstTest/#create-your-first-test"
  },"6": {
    "doc": "Your First Test",
    "title": "Execute your Test",
    "content": "After your first test is created we want to execute it. Do this by select your test in the editor via right mouse button and click on “Run Tests” or “Debug Tests” . The test run is is visualisized in the GdUnit3 inspector and allows you to inspect the test results. As you can see your first test run results with an failure. line 10: Test not implemented! . By default, a generated test first fails with the failure message “Test not implemented” because the assertion assert_not_yet_implemented() is used in the test. By double-clicking on the failed test you can jump directly to the test failure. ",
    "url": "http://localhost:4000/gdUnit3/first_steps/firstTest/#execute-your-test",
    "relUrl": "/first_steps/firstTest/#execute-your-test"
  },"7": {
    "doc": "Your First Test",
    "title": "Complete your first Test",
    "content": "To define your test, you must specify what you want to test. For testing, GdUnit provides a large number of asserts to compare an actual value with an expected value. Remeber we generated a test for the function func full_name() -&gt; String: with has a return type of String. To verify the return value of the function replace the assert_not_yet_implemented() with: . func test_full_name() -&gt; void: var person := TestPerson.new(\"Hoschi\", \"Horst\") assert_str(person.full_name()).is_equal(\"Hoschi Horst\") . Do re run the test by press the “Run Button” on the inspector . The test failure is fixed but now we get a warning? . The report shows a message Detect &lt;1&gt; orphan nodes during test execution what happened? . This warning indicates that we have forgotten to release an object. We still have to release the used object (TestPerson) after the test to avoid memory leaks. You can do this manually or with the included auto_free tool . | GdScript (manual) | GdScript (auto_free) | . | func test_full_name() -&gt; void: var person := TestPerson.new(\"Hoschi\", \"Horst\") assert_str(person.full_name()).is_equal(\"Hoschi Horst\") person.free() . | func test_full_name() -&gt; void: var person :TestPerson = auto_free(TestPerson.new(\"Hoschi\", \"Horst\")) assert_str(person.full_name()).is_equal(\"Hoschi Horst\") . | . GdUnit offers Asserts for all basic build-in types and much more. A collection of tests is called Test Suite in GdUnit, look into Test Suite for more details. Now run your test again and it will complete successful. Congratulations you have successfully written your first test. ",
    "url": "http://localhost:4000/gdUnit3/first_steps/firstTest/#complete-your-first-test",
    "relUrl": "/first_steps/firstTest/#complete-your-first-test"
  },"8": {
    "doc": "Your First Test",
    "title": "Your First Test",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/first_steps/firstTest/",
    "relUrl": "/first_steps/firstTest/"
  },"9": {
    "doc": "Installation",
    "title": "Installation",
    "content": "You have to install the GdUnit3 plugin over the AssetLib in the Godot Editor. | Select the tab AssetLib on the top | Enter GdUnit3 in the search bar | Select GdUnit3 and press the install button | . Activate the plugin . | Open your project settings by Project-&gt;Project Settings, click the Plugins tab and activate GdUnit. | After activation the GdUnit3 inspector is displayed in the top left | Done, GdUnit is ready to use | . GdUnit3 Inspector . After successful installation and activation you will find the GdUnit3 inspector on the left side. ",
    "url": "http://localhost:4000/gdUnit3/first_steps/install/",
    "relUrl": "/first_steps/install/"
  },"10": {
    "doc": "Settings",
    "title": "Settings",
    "content": "GdUnit3 Settings . To open the setting press the tools button on the GdUnit inspector. Common Settings . server connection timout . The server connection timout specifies the maximum time in minutes that the test runner client waits when the communication between editor and runner is interrupted. update notification enabled . Enables/disables the GdUnit update notification. When enabled, an update notification is displayed when Godot is started to inform about a new update to be installed. test root folder . Defines the root folder where tests are generated. The tests are usually located parallel to the source code under ‘test’. You can leave it empty to create tests in the source folder. res://project/src/folder_a/folder_b/my_class.gd res://project/test/folder_a/folder_b/my_class_test.gd . test suite naming convention . Configures how to generate the test-suite file name. | AUTO_DETECT - generates the file name by source file naming convention. | SNAKE_CASE - generates the file name in snake case convention. | PASCAL_CASE - generates the file name in pascal case convention. | . test timeout seconds . Configures the default timeout for the test case in seconds. If a test case runs longer than the specified timeout, the test is interrupted and fails. The default timeout can be overriden on test-case level by using the argument timeout. | GdScript | C# | . | # Configures the test case to fail after a maximum of 2 seconds runtime func test_foo(timeout = 2000) -&gt; void: ... | // Configures the test case to fail after a maximum of 2 seconds runtime [TestCase(Timeout = 2000)] public async Task foo() { } . | . Report Settings - Asserts . verbose errors . Suppresses internal error reporting for failed assert conditions. verbose warnings . Suppresses internal warning reporting for failed assert conditions. verbose orphans . Enable/disable the orphan node reporting . Templates . test suite template . This template is used to create your test-suite by using the context menu in the editor to create a new test-case. You can modify and personalize the template using the tags provided. All supported tags can be viewed by pressing the Supported Tags button. ",
    "url": "http://localhost:4000/gdUnit3/first_steps/settings/",
    "relUrl": "/first_steps/settings/"
  },"11": {
    "doc": "Array Assert",
    "title": "Array Assertions",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-array/#array-assertions",
    "relUrl": "/asserts/assert-array/#array-assertions"
  },"12": {
    "doc": "Array Assert",
    "title": "Array Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-array/",
    "relUrl": "/asserts/assert-array/"
  },"13": {
    "doc": "Boolean Assert",
    "title": "Boolean Assertions",
    "content": "An assertion tool to verify boolean values. | GdScript | C# | . | Function | Description | . | is_true | Verifies that the current value is true. | . | is_false | Verifies that the current value is false. | . | is_equal | Verifies that the current value is equal to the given one. | . | is_not_equal | Verifies that the current value is not equal to the given one. | . | | Function | Description | . | IsTrue | Verifies that the current value is true. | . | IsFalse | Verifies that the current value is false. | . | IsEqual | Verifies that the current value is equal to the given one. | . | IsNotEqual | Verifies that the current value is not equal to the given one. | . | . ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-bool/#boolean-assertions",
    "relUrl": "/asserts/assert-bool/#boolean-assertions"
  },"14": {
    "doc": "Boolean Assert",
    "title": "Boolean Assert Examples",
    "content": "is_true . Verifies that the current value is true. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_true() -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(true).is_true() # this assertion fails because the value is false and not true assert_bool(false).is_true() . | public static IBoolAssert AssertBool(&lt;current&gt;).IsTrue(); . // this assertion succeeds AssertBool(true).IsTrue() // this assertion fails because the value is false and not true AssertBool(false).IsTrue() . | . is_false . Verifies that the current value is false. | GdScript | C# | . | func assert_bool(&lt;current&gt;).is_false() -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(false).is_false() # this assertion fails because the value is true and not false assert_bool(true).is_false() . | public static IBoolAssert AssertBool(&lt;current&gt;).IsFalse(); . // this assertion succeeds AssertBool(false).IsFalse() // this assertion fails because the value is true and not false AssertBool(true).IsFalse() . | . is_equal . Verifies that the current value is equal to the given one. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_equal(&lt;expected&gt;) -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(false).is_equal(false) # this assertion fails because the value is false and not true assert_bool(false).is_equal(true) . | public static IBoolAssert AssertBool(&lt;current&gt;).IsEqual(); . // this assertion succeeds AssertBool(false).IsEqual(false) // this assertion fails because the value is false and not true AssertBool(false).IsEqual(true) . | . is_not_equal . Verifies that the current value is not equal to the given one. | GdScript | C# | . | func assert_str(&lt;current&gt;).is_not_equal(&lt;expected&gt;) -&gt; GdUnitBoolAssert . # this assertion succeeds assert_bool(false).is_not_equal(true) # this assertion fails because the value is false and should not be false assert_bool(false).is_not_equal(false) . | public static IBoolAssert AssertBool(&lt;current&gt;).IsNotEqual(); . // this assertion succeeds AssertBool(false).IsNotEqual(true) // this assertion fails because the value is false and should not be false AssertBool(false).IsNotEqual(false) . | . ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-bool/#boolean-assert-examples",
    "relUrl": "/asserts/assert-bool/#boolean-assert-examples"
  },"15": {
    "doc": "Boolean Assert",
    "title": "Boolean Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-bool/",
    "relUrl": "/asserts/assert-bool/"
  },"16": {
    "doc": "Dictionary Assert",
    "title": "Dictionary Assertions",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-dictionary/#dictionary-assertions",
    "relUrl": "/asserts/assert-dictionary/#dictionary-assertions"
  },"17": {
    "doc": "Dictionary Assert",
    "title": "Dictionary Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-dictionary/",
    "relUrl": "/asserts/assert-dictionary/"
  },"18": {
    "doc": "File Assert",
    "title": "File Assertions",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-file/#file-assertions",
    "relUrl": "/asserts/assert-file/#file-assertions"
  },"19": {
    "doc": "File Assert",
    "title": "File Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-file/",
    "relUrl": "/asserts/assert-file/"
  },"20": {
    "doc": "Float/Double Assert",
    "title": "Float/Double Assertions",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-float/#floatdouble-assertions",
    "relUrl": "/asserts/assert-float/#floatdouble-assertions"
  },"21": {
    "doc": "Float/Double Assert",
    "title": "Float/Double Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-float/",
    "relUrl": "/asserts/assert-float/"
  },"22": {
    "doc": "Integer Assert",
    "title": "Integer Assertions",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-integer/#integer-assertions",
    "relUrl": "/asserts/assert-integer/#integer-assertions"
  },"23": {
    "doc": "Integer Assert",
    "title": "Integer Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-integer/",
    "relUrl": "/asserts/assert-integer/"
  },"24": {
    "doc": "Object Assert",
    "title": "Object Assertions",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-object/#object-assertions",
    "relUrl": "/asserts/assert-object/#object-assertions"
  },"25": {
    "doc": "Object Assert",
    "title": "Object Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-object/",
    "relUrl": "/asserts/assert-object/"
  },"26": {
    "doc": "String Assert",
    "title": "String Assertions",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-string/#string-assertions",
    "relUrl": "/asserts/assert-string/#string-assertions"
  },"27": {
    "doc": "String Assert",
    "title": "String Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-string/",
    "relUrl": "/asserts/assert-string/"
  },"28": {
    "doc": "Common Assert",
    "title": "Common Assertions",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-that/#common-assertions",
    "relUrl": "/asserts/assert-that/#common-assertions"
  },"29": {
    "doc": "Common Assert",
    "title": "Common Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-that/",
    "relUrl": "/asserts/assert-that/"
  },"30": {
    "doc": "Vector2 Assert",
    "title": "Vector2 Assertions",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-vector2/#vector2-assertions",
    "relUrl": "/asserts/assert-vector2/#vector2-assertions"
  },"31": {
    "doc": "Vector2 Assert",
    "title": "Vector2 Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-vector2/",
    "relUrl": "/asserts/assert-vector2/"
  },"32": {
    "doc": "Vector3 Assert",
    "title": "Vector3 Assertions",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-vector3/#vector3-assertions",
    "relUrl": "/asserts/assert-vector3/#vector3-assertions"
  },"33": {
    "doc": "Vector3 Assert",
    "title": "Vector3 Assert",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/asserts/assert-vector3/",
    "relUrl": "/asserts/assert-vector3/"
  },"34": {
    "doc": "Asserts",
    "title": "Asserts",
    "content": "GdUnit3 is providing a set of assertions where give you helpful error messages and improves yor test code readability. Assertions are type organized and supports fluent syntax writing. The pattern for using asserts is defined as assert_&lt;type&gt;(&lt;current&gt;).&lt;comparison function&gt;([expected]). If you don’t know the type of the current value, use the generic assert_that(&lt;current&gt;) instead. On GdScript the asserts are included over GdUnitTestSuite for CSharpScripts you have to import by using static GdUnit3.Assertions; . | GdScript | C# | . | class_name GdUnitExampleTest extends GdUnitTestSuite func test_hello_world() -&gt; void: # using type save assert assert_str(\"Hello world\").is_equal(\"Hello world\") # using common assert assert_that(\"Hello world\").is_equal(\"Hello world\") . | using GdUnit3; using static GdUnit3.Assertions; [TestSuite] public class ExampleTest { [TestCase] public void HelloWorld() { // using type save assert AssertString(\"Hello world\").IsEqual(\"Hello world\"); // using common assert AssertThat(\"Hello world\").IsEqual(\"Hello world\"); } } . | . Using fluent syntax to write compact tests. | GdScript | C# | . | class_name GdUnitExampleTest extends GdUnitTestSuite # bad example of using many times `assert_str` func test_hello_world() -&gt; void: var current := \"Hello World\" assert_str(current).is_equal(\"Hello World\") assert_str(current).contains(\"World\") assert_str(current).not_contains(\"Green\") # example of using fluent syntax to write better readable tests func test_hello_world_fluent() -&gt; void: assert_str(\"Hello World\")\\ .is_equal(\"Hello World\")\\ .contains(\"World\")\\ .not_contains(\"Green\") . | using GdUnit3; using static GdUnit3.Assertions; [TestSuite] public class TestPersionTest { // bad example of using many times `AssertString` [TestCase] public void HelloWorld() { string current = \"Hello World\"; AssertString(current).IsEqual(\"Hello World\"); AssertString(current).Contains(\"World\"); AssertString(current).NotContains(\"Green\"); } // example of using fluent syntax to write better readable tests [TestCase] public void HelloWorldFluent() { AssertString(\"Hello World\") .IsEqual(\"Hello World\") .Contains(\"World\") .NotContains(\"Green\"); } } . | . Basic Build-In Type Asserts . | GdScript | C# | . | Assert | Type | . | assert_str | string | . | assert_bool | bool | . | assert_int | int | . | assert_float | float | . | | Assert | Type | . | AssertString | string | . | AssertBool | bool | . | AssertInt | int | . | AssertFloat | double | . | . For more details about Build-In types click here Godot Build-In Types . Container Built-In Type Asserts . | GdScript | C# | . | Assert | Type | . | assert_array | Array, PoolByteArray, PoolIntArray, PoolRealArray, PoolStringArray, PoolVector2Array, PoolVector3Array, PoolColorArray | . | assert_dict | Dictionary | . | | Assert | Type | . | AssertArray | IEnumerable | . | AssertDictionary | Dictionary | . | . For more details about Build-In types click here Container built-in types . Engine Build-In Type Asserts . | GdScript | C# | . | Type | Assert | . | assert_object | Object | . | assert_vector2 | Vector2 | . | assert_vector3 | Vector3 | . | assert_file | File | . | | Type | Assert | . | AssertObject | Godot.Object, System.object | . | AssertVector2 | Godot.Vector2 | . | AssertVector3 | Godot.Vector3 | . | AssertFile | File | . | . The Common Assert . | GdScript | C# | . | Assert | Type | . | assert_that | auto typing | . | | Assert | Type | . | AssertThat | auto typing | . | . Can be used for all types and gives you access to the basic test functions of GdUnit Assert. However, I recommend to always use the type-safe Assert for GdScripts, because GdScript is not type-safe. ",
    "url": "http://localhost:4000/gdUnit3/asserts/index/",
    "relUrl": "/asserts/index/"
  },"35": {
    "doc": "Continuous Integration Testing",
    "title": "Continuous Integration Testing",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/ci/",
    "relUrl": "/advanced_testing/ci/"
  },"36": {
    "doc": "Fuzzing",
    "title": "Testing with Fuzzers",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/fuzzing/#testing-with-fuzzers",
    "relUrl": "/advanced_testing/fuzzing/#testing-with-fuzzers"
  },"37": {
    "doc": "Fuzzing",
    "title": "Fuzzing",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/fuzzing/",
    "relUrl": "/advanced_testing/fuzzing/"
  },"38": {
    "doc": "Advanced Testing",
    "title": "Advanced Testing",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/index/",
    "relUrl": "/advanced_testing/index/"
  },"39": {
    "doc": "Mocking",
    "title": "Using Mocks",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/mock/#using-mocks",
    "relUrl": "/advanced_testing/mock/#using-mocks"
  },"40": {
    "doc": "Mocking",
    "title": "Mocking",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/mock/",
    "relUrl": "/advanced_testing/mock/"
  },"41": {
    "doc": "Scene Runner",
    "title": "Using Scene Runner",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/sceneRunner/#using-scene-runner",
    "relUrl": "/advanced_testing/sceneRunner/#using-scene-runner"
  },"42": {
    "doc": "Scene Runner",
    "title": "Scene Runner",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/sceneRunner/",
    "relUrl": "/advanced_testing/sceneRunner/"
  },"43": {
    "doc": "Spying",
    "title": "Using Spy",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/spy/#using-spy",
    "relUrl": "/advanced_testing/spy/#using-spy"
  },"44": {
    "doc": "Spying",
    "title": "Spying",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/spy/",
    "relUrl": "/advanced_testing/spy/"
  },"45": {
    "doc": "Tools and Monitoring",
    "title": "Tools and Monitoring",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/advanced_testing/tools/",
    "relUrl": "/advanced_testing/tools/"
  },"46": {
    "doc": "Test Suite",
    "title": "TestSuite Definition",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/faq/testSuite/#testsuite-definition",
    "relUrl": "/faq/testSuite/#testsuite-definition"
  },"47": {
    "doc": "Test Suite",
    "title": "Test Suite",
    "content": " ",
    "url": "http://localhost:4000/gdUnit3/faq/testSuite/",
    "relUrl": "/faq/testSuite/"
  }
}
